wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Loading quantmod
library(quantmod)
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
# Downloading Bank of America Stock Price
america = getSymbols('BAC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Calculating the total return
wells$tot_return = Delt(wells$wells.Adjusted)
america$tot_return = Delt(america$america.Adjusted)
## Calculating the gross return
wells$gross_return = 1 + wells$tot_return
america$gross_return = 1 + america$tot_return
## Removing missing values
wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
## Loading quantmod
library(quantmod)
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
# Downloading Bank of America Stock Price
america = getSymbols('BAC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Calculating the total return
wells$tot_return = Delt(wells$wells.Adjusted)
america$tot_return = Delt(america$america.Adjusted)
## Calculating the gross return
wells$gross_return = 1 + wells$tot_return
america$gross_return = 1 + america$tot_return
## Removing missing values
wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
## Loading quantmod
library(quantmod)
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
# Downloading Bank of America Stock Price
america = getSymbols('BAC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Calculating the total return
wells$tot_return = Delt(wells$WFC.Adjusted)
america$tot_return = Delt(america$BAC.Adjusted)
## Calculating the gross return
wells$gross_return = 1 + wells$tot_return
america$gross_return = 1 + america$tot_return
## Removing missing values
wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
tail(america$net_cum)
tail(america$net_cum)
tail(wells$net_cum)
tail(wells$gross_return)
## Loading quantmod
library(quantmod)
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
# Downloading Bank of America Stock Price
america = getSymbols('BAC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Calculating the total return
wells$tot_return = Delt(wells$WFC.Adjusted)
america$tot_return = Delt(america$BAC.Adjusted)
## Calculating the gross return
wells$gross_return = 1 + wells$tot_return
america$gross_return = 1 + america$tot_return
## Removing missing values
wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
tail(wells$net_cum)
tail(america$net_cum)
## Using the tail funcitno to report the last items in the list, we can see that in
## 12/30/2020 the stock with the best net_cum was Wells Fargo, meaning that Wells Fargo
## Had a slight better performance in 2020.
## Loading quantmod
library(quantmod)
# Downloading Wells Fargo Stock Price
wells = getSymbols('WFC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
# Downloading Bank of America Stock Price
america = getSymbols('BAC', from = '2020-10-01', to = '2020-12-31', auto.assign = F)
## Calculating the total return
wells$tot_return = Delt(wells$WFC.Adjusted)
america$tot_return = Delt(america$BAC.Adjusted)
## Calculating the gross return
wells$gross_return = 1 + wells$tot_return
america$gross_return = 1 + america$tot_return
## Removing missing values
wells = na.omit(wells)
america = na.omit(america)
## Calculating the cumulative gross returns
wells$gross_cum = cumprod(wells$gross_return)
america$gross_cum = cumprod(america$gross_return)
## Converting cumulative gross returns to cumulative net returns
wells$net_cum = wells$gross_cum - 1
america$net_cum = america$gross_cum - 1
wells$net_cum
america$net_cum
# Loading quantmod
library(quantmod)
# Downloading Ebay stock price
ebay = getSymbols('EBAY', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading Paypal stock price
paypal = getSymbols('PYPL', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading S&P500 stock price
ebay = getSymbols('^GSPC', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading Ebay stock price
ebay = getSymbols('EBAY', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Computing the total return
# Creating a dataframe
portfolio = data.frame(as.numeric(Delt(portfolio$WFC.Adjusted)), as.numeric(Delt(portfolio$BAC.Adjusted))
as.numeric(Delt(portfolio$^GSPC.Adjusted))
^GSPC_tot_return = as.numeric(Delt(portfolio$^GSPC.Adjusted))
# Downloading S&P500 stock price
sp = getSymbols('^GSPC', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
benchmark_tot_return = as.numeric(Delt(portfolio$))
# Computing the total return
# Creating a dataframe
portfolio = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
nrow.names(returns) = index(amazon)
nrow.names(returns) = index(ebay)
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
nrow.names(returns) = index(ebay)
returns
benchmark_tot_return = as.numeric(Delt(sp$GSPC.Adjusted))
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
returns
# Loading quantmod
library(quantmod)
# Loading quantmod
library(quantmod)
# Downloading Ebay stock price
ebay = getSymbols('EBAY', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading Paypal stock price
paypal = getSymbols('PYPL', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading S&P500 stock price
sp = getSymbols('^GSPC', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
returns
# Loading quantmod
library(quantmod)
# Downloading Ebay stock price
ebay = getSymbols('EBAY', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading Paypal stock price
paypal = getSymbols('PYPL', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading Paypal stock price
paypal = getSymbols('PYPL', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading S&P500 stock price
sp = getSymbols('^GSPC', from = '2020-01-01', to = '2020-12-31', auto.assign = F)
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)),
benchmark_tot_return = as.numeric(Delt(sp$GSPC.Adjusted))
benchmark_tot_return = as.numeric(Delt(sp$GSPC.Adjusted))
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
returns
returns = na.omit(returns)
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)),
benchmark_tot_return = as.numeric(Delt(sp$GSPC.Adjusted)))
returns = na.omit(returns)
# Computing the total return
# Creating a dataframe
returns = data.frame(EBAY_tot_return = as.numeric(Delt(ebay$EBAY.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)),
benchmark_tot_return = as.numeric(Delt(sp$GSPC.Adjusted)))
row.names(returns) = index(ebay)
returns = na.omit(returns)
# Computing portfolio return
returns$Portfolio_Return = 0.40*returns$EBAY_tot_return + 0.60*returns$PYPL_tot_return
print('The portfolio Sharpe ratio is: ', round(Sharpe_Portfolio, 3))
daily_risk_free_rate = 0.0008 / 365
mu_portfolio = mean(returns$Portfolio_Return)
sigma_portfolio = sd(returns$Portfolio_Return)
Sharpe_Portfolio = (mu_portfolio - daily_risk_free_rate) / sigma_portfolio
print('The portfolio Sharpe ratio is: ', round(Sharpe_Portfolio, 3))
daily_risk_free_rate = 0.0008 / 365
mu_portfolio = mean(returns$Portfolio_Return)
sigma_portfolio = sd(returns$Portfolio_Return)
Sharpe_Portfolio = (mu_portfolio - daily_risk_free_rate) / sigma_portfolio
Sharpe_Portfolio
## Computing the Sharpe of the benchmark
mu_benchmark = mean(returns$benchmark_tot_return)
sigma_benchmark = sd(returns$benchmark_tot_return)
Sharpe_benchmark = (mu_benchmark - daily_risk_free_rate) / sigma_benchmark
Sharpe_benchmark
# Computing the Sharpe Ratio of the portfolio
daily_risk_free_rate = 0.0062 / 365
mu_portfolio = mean(returns$Portfolio_Return)
sigma_portfolio = sd(returns$Portfolio_Return)
Sharpe_Portfolio = (mu_portfolio - daily_risk_free_rate) / sigma_portfolio
Sharpe_Portfolio
Sharpe_benchmark = (mu_benchmark - daily_risk_free_rate) / sigma_benchmark
Sharpe_benchmark
sigma_portfolio = sd(returns$Portfolio_Return)
Roy_Portfolio = (mu_portfolio - daily_risk_free_rate) / sigma_portfolio
Roy_Portfolio
Roy_benchmark = (mu_benchmark - daily_risk_free_rate) / sigma_benchmark
Roy_benchmark
## Computing the RSY measure
RSY_ebay = sqrt((1/nrow(ebay)*sum(ebay$log_high_close*ebay$log_high_open + ebay$log_low_close*ebay$log_low_open)))
# Loading quantmod library
library(quantmod)
# Downloading Ebay stock price
ebay = getSymbols("EBAY", from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Downloading PayPal stock price
paypal = getSymbols("PYPL", from = '2020-01-01', to = '2020-12-31', auto.assign = F)
# Computing log(h_c/c_t)
ebay$log_high_close = log(ebay$EBAY.High / ebay$EBAY.Close)
paypal$log_high_close = log(paypal$PYPL.High / paypal$PYPL.Close)
# Computing log(h_t/o_t)
ebay$log_high_open = log(ebay$EBAY.High / ebay$EBAY.Open)
paypal$log_high_open = log(paypal$PYPL.High / paypal$PYPL.Open)
# Computing log(l_c/c_t)
ebay$log_low_close = log(ebay$EBAY.Low / ebay$EBAY.Close)
paypal$log_low_close = log(paypal$PYPL.Low / paypal$PYPL.Close)
# Computing log(l_t/o_t)
ebay$log_low_open = log(ebay$EBAY.Low / ebay$EBAY.Open)
paypal$log_low_open = log(paypal$PYPL.Low / paypal$PYPL.Open)
## Computing the RSY measure
RSY_ebay = sqrt((1/nrow(ebay)*sum(ebay$log_high_close*ebay$log_high_open + ebay$log_low_close*ebay$log_low_open)))
RSY_paypal = sqrt((1/nrow(paypal)*sum(paypal$log_high_close*paypal$log_high_open + paypal$log_low_close*paypal$log_low_open)))
# In terms of the Rogers-Satchell-Yoon (RSY) measure, the company PayPal is more volatil.
## Computing the RSY measure
RSY_ebay = sqrt((1/nrow(ebay)*sum(ebay$log_high_close*ebay$log_high_open + ebay$log_low_close*ebay$log_low_open)))
RSY_paypal = sqrt((1/nrow(paypal)*sum(paypal$log_high_close*paypal$log_high_open + paypal$log_low_close*paypal$log_low_open)))
RSY_ebay
RSY_paypal
# Computing the log(h_t/l_t)
wells$log_high_low = log(wells$WFC.High / wells$WFC.Low)
# Computing the log(h_t/l_t) for Bank of America
america$log_high_low = log(america$BAC.High / america$BAC.Low)
# Computing log-square for Wells Fargo
wells$log_square = wells$log_high_low^2
# Computing log-square for Bank of America
america$log_square = america$log_high_low^2
# Computing the sum of log-square for Bank of America
america_log_square_sum = sum(america$log_square)
# Computing the sum of log-square for Wells Fargo
wells_log_square_sum = sum(wells$log_square)
# Computing the Parkison volatility measure for Wells Fargo
wells_Parkinson = sqrt((1/(4*nrow(wells)*log(2)))* wells_log_square_sum)
# Computing the Parkison volatility measure for Bank of America
america_Parkinson = sqrt((1/(4*nrow(america)*log(2)))* america_log_square_sum)
# Computing the Parkison volatility measure for Wells Fargo
wells_Parkinson = sqrt((1/(4*nrow(wells)*log(2)))* wells_log_square_sum)
print("The Parkison measure for Wells Fargo is: ", wells_Parkinson)
# Computing the Parkison volatility measure for Bank of America
america_Parkinson = sqrt((1/(4*nrow(america)*log(2)))* america_log_square_sum)
print("The Parkison measure for Bank of America is: ", america_Parkinson)
wells_Parkinson
print("The Parkison measure for Wells Fargo is: ")  wells_Parkinson
wells_Parkinson
print("The Parkison measure for Wells Fargo is: ")
wells_Parkinson
america_Parkinson
wells_Parkinson
america_Parkinson
# Computing the log(c_t/o_t) for Wells Fargo
wells$log_close_open = log(wells$WFC.Close / wells$WFC.Open)
wells$log_close_open_square = wells$log_close_open^2
# Computing the log(c_t/o_t) for Bank of America
america$log_close_open = log(america$BAC.Close / america$BAC.Open)
america$log_close_open_square = america$log_close_open
# Computing log-square for Wells Fargo
wells$log_square = wells$log_high_low^2
# Computing log-square for Bank of America
america$log_square = america$log_high_low^2
# Computing the sum of log-square for Wells Fargo
wells_log_square_sum = sum(wells$log_square)
# Computing the sum of log-square for Bank of America
america_log_square_sum = sum(america$log_square)
# Computing the Parkison volatility measure for Wells Fargo
wells_Parkinson = sqrt((1/(4*nrow(wells)*log(2)))* wells_log_square_sum)
# Computing the Parkison volatility measure for Bank of America
america_Parkinson = sqrt((1/(4*nrow(america)*log(2)))* america_log_square_sum)
wells_Parkinson
america_Parkinson
# Computing the Garman-Klass volatility measure for Wells Fargo
wells_Garman_Klass = sqrt((1/(2*nrow(amazon))) * sum(wells$log_square - ((2*log(2)-1/nrow(wells)))*wells$log_close_open_square))
# Computing the Garman-Klass volatility measure for Wells Fargo
wells_Garman_Klass = sqrt((1/(2*nrow(wells))) * sum(wells$log_square - ((2*log(2)-1/nrow(wells)))*wells$log_close_open_square))
wells_Garman_Klass
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/(2*nrow(america))) * sum(america$log_square - ((2*log(2)-1/nrow(america)))*america$log_close_open_square))
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/(2*nrow(america))) * sum(america$log_square - ((2*log(2)-1/nrow(america)))*america$log_close_open_square))
america_Garman_Klass
# Computing the log(c_t/o_t) for Bank of America
america$log_close_open = log(america$BAC.Close / america$BAC.Open)
america$log_close_open_square = america$log_close_open
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/(2*nrow(america))) * sum(america$log_square - ((2*log(2)-1/nrow(america)))*america$log_close_open_square))
# Computing the Parkison volatility measure for Bank of America
america_Parkinson = sqrt((1/(4*nrow(america)*log(2)))* america_log_square_sum)
america_Parkinson
# Computing the log(c_t/o_t) for Bank of America
america$log_close_open = log(america$BAC.Close / america$BAC.Open)
america$log_close_open_square = america$log_close_open
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/(2*nrow(america))) * sum(america$log_square - ((2*log(2)-1/nrow(america)))*america$log_close_open_square))
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/(2*nrow(america))) * sum(america$log_square - ((2 * log(2)-1/nrow(america)))*america$log_close_open_square))
america_Garman_Klass
america
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/2*nrow(america))) * sum(america$log_square - ((2*log(2)-1)/nrow(america))*america$log_close_open_square)
america_Garman_Klass
# Computing the Garman-Klass volatility measure for Wells Fargo
wells_Garman_Klass = sqrt((1/(2*nrow(wells))) * sum(wells$log_square - ((2*log(2)-1)/nrow(wells))*wells$log_close_open_square)
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/2*nrow(america))) * sum(america$log_square - ((2*log(2)-1)/nrow(america))*america$log_close_open_square)
# Computing the Garman-Klass volatility measure for Wells Fargo
wells_Garman_Klass = sqrt((1/2*nrow(wells))) * sum(wells$log_square - ((2*log(2)-1)/nrow(wells))*wells$log_close_open_square)
wells_Garman_Klass
# Computing the Garman-Klass volatility measure for Wells Fargo
america_Garman_Klass = sqrt((1/2*nrow(america))) * sum(america$log_square - ((2*log(2)-1)/nrow(america))*america$log_close_open_square)
america_Garman_Klass
wells_Garman_Klass
america_Garman_Klass
# Computing log(h_c/c_t)
wells$log_high_close = log(wells$WFC.High / wells$WFC.Close)
america$log_high_close = log(america$BAC.High / america$BAC.Close)
# Computing log(h_t/o_t)
wells$log_high_open = log(wells$WFC.High / wells$WFC.Open)
america$log_high_open = log(america$BAC.High / america$BAC.Open)
# Computing log(l_c/c_t)
wells$log_low_close = log(wells$WFC.Low / wells$WFC.Close)
america$log_low_close = log(america$BAC.Low / america$BAC.Close)
# Computing log(l_t/o_t)
wells$log_low_open = log(wells$WFC.Low/ wells$WFC.Open)
america$log_low_open = log(america$BAC.Low/ america$BAC.Open)
## Computing the RSY measure
RSY_wells = sqrt((1/nrow(wells)*sum(wells$*wells$log_high_open + wells$log_low_close*wells$log_low_open)))
## Computing the RSY measure
RSY_wells = sqrt((1/nrow(wells)*sum(wells$log_high_close*wells$log_high_open + wells$log_low_close*wells$log_low_open)))
RSY_america = sqrt((1/nrow(america)*sum(america$log_high_close*america$log_high_open + america$log_low_close*america$log_low_open)))
RSY_wells
## Computing the RSY measure
RSY_wells = sqrt((1/nrow(wells)*sum(wells$log_high_close*wells$log_high_open + wells$log_low_close*wells$log_low_open)))
RSY_wells
RSY_america = sqrt((1/nrow(america)*sum(america$log_high_close*america$log_high_open + america$log_low_close*america$log_low_open)))
RSY_america
# Importing quantmod library
library(quantmod)
Downloading Alibaba stock price
baba = getSymbols('BABA', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading ViacomCBS stock data price
cbs = getSymbols('VIAC', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading Goldman Sachs stock data price
goldman = getSymbols('GS', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading Disney stock data price
disney = getSymbols('DIS', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading PayPal stock price
paypal = getSymbols('PYPL', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading Benchmark stock data price
benchmark = getSymbols('^GSPC', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
library(quantmod)
# Downloading Alibaba stock price
baba = getSymbols('BABA', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading ViacomCBS stock data price
cbs = getSymbols('VIAC', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading Goldman Sachs stock data price
goldman = getSymbols('GS', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading Disney stock data price
disney = getSymbols('DIS', from = '2018-01-01', end = '2021-01-31', auto.assign = F)
# Downloading PayPal stock price
paypal = getSymbols('PYPL', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading Benchmark stock data price
benchmark = getSymbols('^GSPC', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# (b)
# Computing total returns of the stocks
returns = data.frame(,
BABA_tot_return = as.numeric(Delt(baba$BABA.Adjusted)),
VIAC_tot_return = as.numeric(Delt(cbs$VIAC.Adjusted)),
GS_tot_return = as.numeric(Delt(goldman$GS.Adjusted)),
DIS_tot_return = as.numeric(Delt(disney$DIS.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)))
# (b)
# Computing total returns of the stocks
returns = data.frame(BABA_tot_return = as.numeric(Delt(baba$BABA.Adjusted)),
VIAC_tot_return = as.numeric(Delt(cbs$VIAC.Adjusted)),
GS_tot_return = as.numeric(Delt(goldman$GS.Adjusted)),
DIS_tot_return = as.numeric(Delt(disney$DIS.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)))
baba = getSymbols('BABA', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading ViacomCBS stock data price
cbs = getSymbols('VIAC', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading Goldman Sachs stock data price
goldman = getSymbols('GS', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading Disney stock data price
disney = getSymbols('DIS', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# Downloading PayPal stock price
paypal = getSymbols('PYPL', from = '2018-01-01', to = '2021-01-31', auto.assign = F)
# (b)
# Computing total returns of the stocks
returns = data.frame(BABA_tot_return = as.numeric(Delt(baba$BABA.Adjusted)),
VIAC_tot_return = as.numeric(Delt(cbs$VIAC.Adjusted)),
GS_tot_return = as.numeric(Delt(goldman$GS.Adjusted)),
DIS_tot_return = as.numeric(Delt(disney$DIS.Adjusted)),
PYPL_tot_return = as.numeric(Delt(paypal$PYPL.Adjusted)))
returns = na.omit(returns)
View(returns)
head(returns)
tail(returns)
# (c)
# Loading quadprog
library(quadprog)
# Defining the number of stocks
n = dim(returns)[2]
n
# Defining dvec
dvec = rep(0, n)
# Defining the covariance matrix
D = cov(returns)
D
# Defining the matrix of constraints
A = rbind(rep(1, n), diag(n))
bO = c(1, rep(0, n))
# Solving the optimization problem
weights_min_var = solve.QP(Dmat = D, dvec = dvec, Amat = t(A), bvec = bO, meq = 1)$solution
round(weights_min_var, 2)
weights_max_Sharpe
round(weights_min_var, 2)
# (d)
# Defining the risk free rate
daily_risk = 0.0008 / 365
round(weights_min_var, 2)
# Defining the matrix of constraints
return_means = colMeans(returns) - daily_risk
A = rbind(return_means, diag(n))
A
,
# Solving the optimization problem
weights_max_Sharpe = solve.QP(Dmat = D, dvec = dvec, Amat = t(A), bvec = bO, meq = 1)$solution
weights_max_Sharpe = weights_max_Sharpe/sum(weights_max_Sharpe)
weights_max_Sharpe
# (d)
# Defining the risk free rate
daily_risk = 0.0008 / 365
# Defining the matrix of constraints
return_means = colMeans(returns) - daily_risk
A = rbind(return_means, diag(n))
# Solving the optimization problem
weights_max_Sharpe = solve.QP(Dmat = D, dvec = dvec, Amat = t(A), bvec = bO, meq = 1)$solution
weights_max_Sharpe = weights_max_Sharpe/sum(weights_max_Sharpe)
weights_max_Sharpe
round(weights_min_var, 2)
setwd("~/OneDrive - Grand View University/Classes")
setwd("~/OneDrive - Grand View University/Classes/Sport Analytics/Datasets")
## Reading cvs file
goalie_stats = read.csv("game_goalie_stats.csv")
## Reading cvs file
goalie_stats = read.csv("game_goalie_stats.csv")
## Printing the first four observation
head(goalie_stats)
## Printing the first four observation
head(goalie_stats, 3)
## Printing the first four observation
head(goalie_stats, 4)
## Printing the last four observation
tail(goalie_stats, 4)
## Reporting the number of team ids
unique(goalie_stats$team_id)
## Reporting the number of team ids
sum(unique(goalie_stats$team_id))
## Reporting the number of team ids
length(unique(goalie_stats$team_id))
## Selecting oalies with savePercentage > 95% in winning plays
goalie_95_w = subset(goalie_stats, savePercentage > 95 & decision == 'W')
## Reporting the number of goalies with savePercent age > 95% in winning plays
goalie_95_w
## Reporting the number of goalies with savePercent age > 95% in winning plays
dim(goalie_95_w)
